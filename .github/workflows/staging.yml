name: Terraform staging

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  plan:
    name: Plan
    runs-on: ubuntu-latest
    env:
      working-directory: ./terraform
    environment: staging
    steps:
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      working-directory: ${{env.working-directory}}
      run: terraform init

    - name: Terraform Validate
      working-directory: ${{env.working-directory}}
      run: terraform validate

    - name: Terraform Plan
      id: plan
      working-directory: ${{env.working-directory}}
      run: terraform plan -input=false

    - name: Update Pull Request
      uses: actions/github-script@v6
      # if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  deploy:
    name: Build
    runs-on: ubuntu-latest
    env:
      working-directory: ./terraform
    environment: staging
    needs: plan
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      working-directory: ${{env.working-directory}}
      run: terraform apply -auto-approve -input=false
